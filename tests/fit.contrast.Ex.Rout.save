
R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0 beta (2004-03-26), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> library(gregmisc)

Attaching package 'gregmisc':


	The following object(s) are masked from package:stats :

	 lowess 

> set.seed(1234)
> 
> y <- rnorm(100)
> x <-  cut(rnorm(100, mean=y, sd=0.25),c(-4,-1.5,0,1.5,4))
> reg <- lm(y ~ x)
> summary(reg)

Call:
lm(formula = y ~ x)

Residuals:
     Min       1Q   Median       3Q      Max 
-1.26554 -0.33860  0.02518  0.35433  1.06396 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  -1.7821     0.1879  -9.482 1.93e-15 ***
x(-1.5,0]     1.1164     0.1979   5.641 1.71e-07 ***
x(0,1.5]      2.3240     0.2048  11.348  < 2e-16 ***
x(1.5,4]      3.8231     0.2561  14.927  < 2e-16 ***
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1 

Residual standard error: 0.4603 on 96 degrees of freedom
Multiple R-Squared: 0.7963,	Adjusted R-squared: 0.7899 
F-statistic: 125.1 on 3 and 96 DF,  p-value: < 2.2e-16 

> 
> # look at the group means
> gm <- sapply(split(y,x),mean)
> gm
 (-4,-1.5]   (-1.5,0]    (0,1.5]    (1.5,4] 
-1.7820927 -0.6656947  0.5419534  2.0410114 
> 
> 
> # mean of 1st group vs mean of 4th group
> fit.contrast(reg, x, c(    1,    0,    0,   -1) )
                  Estimate Std. Error   t value     Pr(>|t|)
x c=( 1 0 0 -1 ) -3.823104  0.2561138 -14.92736 9.204672e-27
> # estimate should be equal to:
> gm[1] - gm[4]
(-4,-1.5] 
-3.823104 
> 
> # mean of 1st and 2nd groups vs mean of 3rd and 4th groups
> fit.contrast(reg, x, c( -1/2, -1/2,  1/2,  1/2) )
                          Estimate Std. Error  t value     Pr(>|t|)
x c=( -0.5 -0.5 0.5 0.5 ) 2.515376  0.1379039 18.24007 5.876197e-33
> # estimate should be equal to:
> sum(-1/2*gm[1], -1/2*gm[2], 1/2*gm[3], 1/2*gm[4])
[1] 2.515376
> 
> # mean of 1st group vs mean of 2nd, 3rd and 4th groups
> fit.contrast(reg, x, c( -3/3,  1/3,  1/3,  1/3) ) 
                                                                 Estimate
x c=( -1 0.333333333333333 0.333333333333333 0.333333333333333 ) 2.421183
                                                                 Std. Error
x c=( -1 0.333333333333333 0.333333333333333 0.333333333333333 )  0.1996191
                                                                  t value
x c=( -1 0.333333333333333 0.333333333333333 0.333333333333333 ) 12.12902
                                                                     Pr(>|t|)
x c=( -1 0.333333333333333 0.333333333333333 0.333333333333333 ) 4.427216e-21
> # estimate should be equal to:
> sum(-3/3*gm[1], 1/3*gm[2], 1/3*gm[3], 1/3*gm[4])
[1] 2.421183
> 
> # all at once
> cmat <- rbind( "1 vs 4"    =c(-1, 0, 0, 1),
+                "1+2 vs 3+4"=c(-1/2,-1/2, 1/2, 1/2),
+                "1 vs 2+3+4"=c(-3/3, 1/3, 1/3, 1/3))
> fit.contrast(reg,x,cmat)
            Estimate Std. Error  t value     Pr(>|t|)
x1 vs 4     3.823104  0.2561138 14.92736 9.204672e-27
x1+2 vs 3+4 2.515376  0.1379039 18.24007 5.876197e-33
x1 vs 2+3+4 2.421183  0.1996191 12.12902 4.427216e-21
> 
> #
> x2 <- rnorm(100,mean=y,sd=0.5)
> reg2 <- lm(y ~ x + x2 )
> fit.contrast(reg2,x,c(-1,0,0,1))
                 Estimate Std. Error t value     Pr(>|t|)
x c=( -1 0 0 1 ) 1.895830  0.3006492 6.30579 8.997662e-09
> 
> #
> # Example for Analysis of Variance
> #
> 
> set.seed(03215)
> Genotype <- sample(c("WT","KO"), 1000, replace=TRUE)
> Time <- factor(sample(1:3, 1000, replace=TRUE))
> y <- rnorm(1000)
> data <- data.frame(y, Genotype, Time)
> 
> 
> # Compute Contrasts & obtain 95\% confidence intervals
> 
> model <- aov( y ~ Genotype + Time + Genotype:Time, data=data )
> 
> fit.contrast( model, "Genotype", rbind("KO vs WT"=c(-1,1) ), conf=0.95 )
                   Estimate Std. Error   t value Pr(>|t|)   lower CI  upper CI
GenotypeKO vs WT 0.01683876  0.1095764 0.1536714   0.8779 -0.1981888 0.2318664
> 
> fit.contrast( model, "Time",
+             rbind("1 vs 2"=c(-1,1,0),
+                   "2 vs 3"=c(0,-1,1)
+                   ),
+             conf=0.95 )
               Estimate Std. Error     t value  Pr(>|t|)   lower CI   upper CI
Time1 vs 2 -0.003321336  0.1150931 -0.02885782 0.9769838 -0.2291746 0.22253196
Time2 vs 3 -0.131231895  0.1152710 -1.13846378 0.2552012 -0.3574344 0.09497061
> 
> 
> cm.G <- rbind("KO vs WT"=c(-1,1) )
> cm.T <- rbind("1 vs 2"=c(-1,1,0),
+               "2 vs 3"=c(0,-1,1) )
> 
> # Compute contrasts and show SSQ decompositions
> 
> model <- aov( y ~ Genotype + Time + Genotype:Time, data=data,
+               contrasts=list(Genotype=make.contrasts(cm.G),
+                              Time=make.contrasts(cm.T) )
+             )
> 
> summary(model, split=list( Genotype=list( "KO vs WT"=1 ),
+                            Time = list( "1 vs 2" = 1,
+                                         "2 vs 3" = 2 ) ) )
                                  Df  Sum Sq Mean Sq F value Pr(>F)
Genotype                           1    1.17    1.17  1.1207 0.2900
  Genotype: KO vs WT               1    1.17    1.17  1.1207 0.2900
Time                               2    0.74    0.37  0.3526 0.7029
  Time: 1 vs 2                     1    0.18    0.18  0.1710 0.6793
  Time: 2 vs 3                     1    0.56    0.56  0.5342 0.4650
Genotype:Time                      2    1.15    0.58  0.5524 0.5758
  Genotype:Time: KO vs WT.1 vs 2   1    0.33    0.33  0.3131 0.5759
  Genotype:Time: KO vs WT.2 vs 3   1    0.83    0.83  0.7916 0.3738
Residuals                        994 1036.64    1.04               
> 
> 
> # example for lme 
> library(nlme)
> data(Orthodont)
> fm1 <- lme(distance ~ Sex, data = Orthodont,random=~1|Subject) 
> 
> # Contrast for sex.  This example is equivalent to standard treatment
> # contrast.
> #
> fit.contrast(fm1, "Sex", c(-1,1), conf.int=0.95 )
                Estimate Std. Error   t-value    Pr(>|t|)  lower CI   upper CI
Sex c=( -1 1 ) -2.321023  0.7614192 -3.048285 0.005375176 -3.889195 -0.7528506
> #
> # and identical results can be obtained using lme built-in 'intervals'
> #
> intervals(fm1)
Approximate 95% confidence intervals

 Fixed effects:
                lower      est.      upper
(Intercept) 24.001758 24.968750 25.9357420
SexFemale   -3.889195 -2.321023 -0.7528506
attr(,"label")
[1] "Fixed effects:"

 Random Effects:
  Level: Subject 
                   lower     est.    upper
sd((Intercept)) 1.050716 1.595847 2.423802

 Within-group standard error:
   lower     est.    upper 
1.903438 2.220310 2.589932 
> 
> # Cut age into quantile groups & compute some contrasts
> Orthodont$AgeGroup <- quantcut(Orthodont$age)
> fm2 <- lme(distance ~ Sex + AgeGroup, data = Orthodont,random=~1|Subject)
> #
> fit.contrast(fm2, "AgeGroup", rbind("Linear"=c(-2,-1,1,2),
+                                     "U-Shaped"=c(-1,1,1,-1),
+                                     "Change-Point at 11"=c(-1,-1,1,1)),
+                               conf.int=0.95)
                            Estimate Std. Error    t-value     Pr(>|t|)
AgeGroupLinear              9.296296  0.8773838 10.5954730 0.000000e+00
AgeGroupU-Shaped           -0.462963  0.5549062 -0.8343085 4.066551e-01
AgeGroupChange-Point at 11  5.388889  0.5549062  9.7113504 4.440892e-15
                            lower CI   upper CI
AgeGroupLinear              7.549559 11.0430333
AgeGroupU-Shaped           -1.567696  0.6417705
AgeGroupChange-Point at 11  4.284155  6.4936223
> 
> 
> 
